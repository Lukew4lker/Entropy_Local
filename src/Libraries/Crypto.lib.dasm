; --------------------------------------------
; Title: cryptolib
; Author: awesome271828
; See README in docs.
; --------------------------------------------

:lib_crypto

; Performs the encryption or decryption.
; A is the location of the key.
; B is the beginning of data to be encrypted or decrypted.
; C is the end of this data block.
; PUSH the iterations value to the stack. See README for what the iteration
; value represents.
; The data is overwritten in place by the encrypted or decrypted version.

:lib_crypto_wrapper
    SET PUSH, I
    SET I, PICK 2 ; Set I to iterations passed on the stack.
    SET PUSH, J   ; The value of PC is above iterations on the stack, hence 2
    SET PUSH, X   ; instead of 1.
    SET PUSH, Y
    SET PUSH, Z
:lib_crypto_RELOC1 JSR lib_crypto_apply
    SET Z, POP
    SET Y, POP
    SET X, POP
    SET J, POP
    SET I, POP
    SET PC, POP

; Cleans up the library's memory. Use when all encryption and decryption
; operations have been completed.

:lib_crypto_cleanup
    SET PUSH, I
    SET PUSH, J
:lib_crypto_RELOC2 JSR lib_crypto_init
    SET A, 0
    SET B, 0
    SET C, 0
    SET J, POP
    SET I, POP
    SET PC, POP

; Don't call anything below this point from your code.
; -----------------------------------------------------------------------------

; Initializes the state array.

:lib_crypto_init
:lib_crypto_RELOC3 SET I, lib_crypto_state
    SET J, 0
    :lib_crypto_initloop
        STI [I], J
:lib_crypto_RELOC4 IFN I, lib_crypto_end
:lib_crypto_RELOC5 SET PC, lib_crypto_initloop
:lib_crypto_RELOC6 SET [lib_crypto_firstrun_flag], 1 ; [label] comes after 1
    SET PC, POP                                      ; longform.

; Sets up the state based on the key.
; A is the number of iterations and B is the location of the key in memory.

:lib_crypto_shufflestate
:lib_crypto_RELOC7 SET [lib_crypto_firstrun_flag], 0 ; Same as above.
    SET J, 0
    :lib_crypto_shuffleloop_outer
        SET I, 0 ; Inner loop counter.
        :lib_crypto_shuffleloop
            SET C, B ; Key pointer.
:lib_crypto_RELOC8 SET Y, lib_crypto_state ; State array pointer.
            SET Z, Y ; Set Y and Z (array pointer) to beginning of array.
            ADD Y, I ; Move Y to ith position.
            ADD J, [Y]
            ADD C, I ; Move C to ith position.
            ADD J, [C]
            AND J, 0xff ; Fewer cycles than MOD J, 256.
            ADD Z, J ; Move Z to jth position.
            SET X, [Y] ; Use X as temp and swap ith and jth array values.
            SET [Y], [Z]
            SET [Z], X ; Swap complete.
            ADD I, 1
            IFN I, 256
:lib_crypto_RELOC9 SET PC, lib_crypto_shuffleloop
            SUB A, 1
            IFN A, 0
:lib_crypto_RELOC10 SET PC, lib_crypto_shuffleloop_outer
            SET PC, POP

; Applies the algorithm with arguments passed from the wrapper subroutine.

:lib_crypto_apply
    SET PUSH, A
    SET PUSH, B
    SET PUSH, C
    SET PUSH, I ; Store values on stack.
:lib_crypto_RELOC11 IFN [lib_crypto_firstrun_flag], 1 ; Same as RELOC6.
:lib_crypto_RELOC12     JSR lib_crypto_init
    SET A, POP ; Set A to iterations.
    SET B, PICK 2 ; Set B to key location.
    JSR lib_crypto_shufflestate
    SET C, POP
    SET B, POP
    SET A, POP ; Retrieve values.
    SET I, 0
    SET J, 0
    :lib_crypto_applyloop
        IFG B, C
            SET PC, POP ; Exits here.
:lib_crypto_RELOC13 SET Y, lib_crypto_state ; State array pointer.
        SET Z, Y ; Ditto.
        ADD I, 1
        AND I, 0xff ; Fewer cycles than MOD I, 256.
        ADD Y, I ; Move Y pointer to ith position.
        ADD J, [Y]
        ADD Z, J ; Swap ith and jth values of the state.
        SET X, [Y]
        SET [Y], [Z]
        SET [Z], X ; Swap complete.
        ADD X, [Z] ; X is already set to [Y] and addition is commutative.
        AND X, 0xff ; Fewer cycles than MOD X, 256.
        XOR [B], X
        ADD B, 1
:lib_crypto_RELOC14 SET PC, lib_crypto_applyloop

:lib_crypto_firstrun_flag
DAT 0x01

:lib_crypto_state
DAT 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
DAT 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
DAT 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
DAT 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
DAT 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
DAT 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F
DAT 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F
DAT 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
DAT 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F
DAT 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
DAT 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF
DAT 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
DAT 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF
DAT 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
DAT 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF
DAT 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
:lib_crypto_end

; Begin Library Header.
DAT lib_crypto_wrapper
DAT lib_crypto_cleanup
; Begin Relocation Table.
DAT lib_crypto_RELOC1+1
DAT lib_crypto_RELOC2+1
DAT lib_crypto_RELOC3+1
DAT lib_crypto_RELOC4+1
DAT lib_crypto_RELOC5+1
DAT lib_crypto_RELOC6+2
DAT lib_crypto_RELOC7+2
DAT lib_crypto_RELOC8+1
DAT lib_crypto_RELOC9+1
DAT lib_crypto_RELOC10+1
DAT lib_crypto_RELOC11+2
DAT lib_crypto_RELOC12+1
DAT lib_crypto_RELOC13+1
DAT lib_crypto_RELOC14+1
; End Relocation Table.
DAT 14 ; Relocation table length
DAT 1 ; Lib version number.
DAT 0x0004 ; Lib ID
DAT 2 ; Header version number.
DAT 19 ; Library Header length.
; End Library Header.