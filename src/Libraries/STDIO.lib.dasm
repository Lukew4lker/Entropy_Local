; --------------------------------------------
; Title:   lib_STDIO
; Author:  Alex
; Date:    8/24/2012
; Version: 0.6
; --------------------------------------------

; From the spec
;
;The Goal of the STDIO library is as follows:
;
;Enable extremely flexible and fast Input and Output system
;Allow programs easy access to screen, keyboard, and FS access
;Implement security against bad programs
;Make the Implemtation completely independant of programs, for easy modification


;@name lib_STDIO_init
;Performs hardware detection of LEM1802 and Generic Keyboard,
;saves HW id, and turns on LEM1802
;@destroys A,B,C,J,X,Y
;@see thePalindrome
:lib_STDIO_init
    HWN J
    :lib_STDIO_initLoop
        ;loop to find LEM1802, SPED-3, and Generic Keyboard
        HWQ J
        IFE B, 0x30CF
            IFE A, 0x7406
                :lib_STDIO_RELOC1 JSR lib_STDIO_initKeyboard
        IFE B, 0x7349
            IFE A, 0xF615 
                :lib_STDIO_RELOC2 JSR lib_STDIO_initScreen
        IFE B, 0xBF3C
            IFE A, 0x42BA
                :lib_STDIO_RELOC3 JSR lib_STDIO_initProjector
        SUB J, 1
        IFA J, -1
            :lib_STDIO_RELOC4 SET PC, lib_STDIO_initLoop
        :lib_STDIO_RELOC5 SET PC, lib_STDIO_initLoopEnd
    :lib_STDIO_initScreen
    ;Save HW id of monitor, then turn on with buffer at 0x8000
    :lib_STDIO_RELOC6 SET [lib_STDIO_monitorID], J
    SET A, 0
    SET B, 0x8000
    HWI J
    SET PC, POP
    :lib_STDIO_initKeyboard
    ;Save HW id of keyboard
    :lib_STDIO_RELOC7 SET [lib_STDIO_KeyboardID], J
    SET PC, POP
    :lib_STDIO_initProjector
    ;Save HW id of projector
    :lib_STDIO_RELOC8 SET [lib_STDIO_ProjectorID], J
    SET PC, POP
    :lib_STDIO_initLoopEnd
    ;Set bounds for monitor buffer
    :lib_STDIO_RELOC9 SET [lib_STDIO_MonitorPos], 0x8000
    :lib_STDIO_RELOC10 SET [lib_STDIO_MonitorStart], [lib_STDIO_MonitorPos]
    :lib_STDIO_RELOC11 SET [lib_STDIO_MonitorEnd], [lib_STDIO_MonitorPos]
    :lib_STDIO_RELOC12 ADD [lib_STDIO_MonitorEnd], 386
    SET PC, POP

;@name lib_STDIO_getChar
;Allocates a buffer size B at return A, with Input A designating blocking mode
;@params A 
;@params B 
;@returns A 
;@destroys C
;@see thePalindrome
:lib_STDIO_getChar
    ; INPUT: B, A
    ; OUTPUT: A
    ; DESC: If A == 0, return ASAP, returns B characters starting with address A
    ; NOTE: A will be 0 if getChar fails!
    ; NOTE: Caller is responsible for freeing memory!
    SET C, A
    SET A, B
    JSR [0x0]
    IFE A, 0
        SET PC, POP
    SET PUSH, Z
    SET PUSH, Y
    SET PUSH, X
    SET PUSH, I
    SET X, C
    SET Z, A
    SET Y, A
    SET I, 0
    :lib_STDIO_getCharLoop
        SET A, 1
        :lib_STDIO_RELOC13 HWI [lib_STDIO_KeyboardID]
        IFE C, 0
            IFN X, 0
                :lib_STDIO_RELOC14 SET PC, lib_STDIO_getCharLoop
        IFE C, 0x0010
            IFL Y, Z
                SUB Z, 0x0001
        SET [Z], C
        ADD Z, 0x0001
        IFE C, 0
            :lib_STDIO_RELOC15 SET PC, lib_STDIO_getCharLoopEnd
        ADD I, 1
        IFN I, B
            :lib_STDIO_RELOC16 SET PC, lib_STDIO_getCharLoop
    :lib_STDIO_getCharLoopEnd
    SET I, POP
    SET X, POP
    SET A, Y
    SET Y, POP
    SET Z, POP
    SET PC, POP
        
;@name lib_STDIO_print
;Prints a number of characters, in the chosen color, from a memory location
;@params [A] Pointer to memory location of first character to print
;@params B Number of characters to print
;@params C Color to print in (Foreground<<12)+(Background<<8)
;@see thePalindrome
:lib_STDIO_print
    SET PUSH, I
    ADD B, A
    :lib_STDIO_printLoop
        IFE [A], 0x0010
            :lib_STDIO_RELOC17 SET PC, lib_STDIO_printLoopBack
        IFE [A], 0x0011
            :lib_STDIO_RELOC18 JSR lib_STDIO_enter
        IFE [A], 0x0011
            :lib_STDIO_RELOC19 SET PC, lib_STDIO_printLoopCont
        :lib_STDIO_RELOC20 SET PC, lib_STDIO_printLoopPrint
        :lib_STDIO_printLoopBack
            :lib_STDIO_RELOC21 SUB [lib_STDIO_MonitorPos], 1
            :lib_STDIO_RELOC22 SET I, [lib_STDIO_MonitorPos]
            SET [I], 0
            :lib_STDIO_RELOC23 SET PC, lib_STDIO_printLoopCont
        :lib_STDIO_printLoopPrint
            BOR [A], C
            :lib_STDIO_RELOC24 SET I, [lib_STDIO_MonitorPos]
            SET [I], [A]
            :lib_STDIO_RELOC25 ADD [lib_STDIO_MonitorPos], 1
        :lib_STDIO_printLoopCont
        :lib_STDIO_RELOC26 IFE [lib_STDIO_MonitorPos], [lib_STDIO_MonitorEnd]
            :lib_STDIO_RELOC27 JSR lib_STDIO_scroll
        ADD A, 1
        IFN A, B
            :lib_STDIO_RELOC28 SET PC, lib_STDIO_printLoop
    :lib_STDIO_printEnd
    SET I, POP
    SET PC, POP

;@name lib_STDIO_scroll
;Scroll the text on the screen up 1 line?
;@see thePalindrome
:lib_STDIO_scroll
    ; INPUT: NONE
    ; OUTPUT: NONE
    ; DESC: Helper function, scrolls the screen
    SET PUSH, X
    SET PUSH, Y
    SET PUSH, A
    :lib_STDIO_RELOC29 SET X, [lib_STDIO_MonitorStart]
    SET Y, 0x20
    ADD Y, X
    :lib_STDIO_scrollLoopOne
        SET [X], [Y]
        ADD X, 1
        ADD Y, 1
        :lib_STDIO_RELOC30 IFG Y, [lib_STDIO_MonitorEnd]
            :lib_STDIO_RELOC31 SET PC, lib_STDIO_scrollLoopTwo
        :lib_STDIO_RELOC32 SET PC, lib_STDIO_scrollLoopOne
        :lib_STDIO_scrollLoopTwo
            SET A, 0
            SET [X], A
            ADD X, 1
            :lib_STDIO_RELOC33 IFG X, [lib_STDIO_MonitorEnd]
                :lib_STDIO_RELOC34 SET PC, lib_STDIO_scrollEnd
            :lib_STDIO_RELOC35 SET PC, lib_STDIO_scrollLoopTwo
    :lib_STDIO_scrollEnd
        :lib_STDIO_RELOC36 SUB [lib_STDIO_MonitorPos], 0x20
        SET A, POP
        SET Y, POP
        SET X, POP
        SET PC, POP

;@name lib_STDIO_enter
;Moves the position of the next character to the next line
;@see thePalindrome
:lib_STDIO_enter
    SET PUSH, J
    SET PUSH, A
    :lib_STDIO_RELOC37 SET A, [lib_STDIO_MonitorPos]
    SET J, A
    MOD J, 0x0020
    SUB A, J
    ADD A, 0x0020
    :lib_STDIO_RELOC38 IFG A, [lib_STDIO_MonitorEnd]
        :lib_STDIO_RELOC39 SET A, [lib_STDIO_MonitorStart]
    :lib_STDIO_RELOC40 SET [lib_STDIO_MonitorPos], A
    :lib_STDIO_RELOC41 IFG A, [lib_STDIO_MonitorEnd]
        :lib_STDIO_RELOC42 JSR lib_STDIO_scroll
    SET A, POP
    SET J, POP
    SET PC, POP
    
;@name lib_STDIO_SPED3_PUSH
;Takes the X,Y,Z, and color, and adds it to the vertex stack
;@params X the X co-ord of the vertex
;@params Y the Y co-ord of the vertex
;@params Z the Z co-ord of the vertex
;@params C the color of the vertex, with 1 as red, 2 as green, 3 as blue, with bit 3 being intensity
;@returns C Which position in the stack the vertex is
;@see thePalindrome
;NOTE, DO NOT USE, STACK ISN'T REAL!
:lib_STDIO_SPED3_PUSH
    SET PUSH, A
    SET A, 0
    :lib_STDIO_RELOC43 JSR lib_STDIO_SPED3_PUT
    SET A, POP
    :lib_STDIO_RELOC44 SET C, [lib_STDIO_Projector_StackPos]
    :lib_STDIO_RELOC45 SUB C, lib_STDIO_Projector_Stack
    SUB C, 2
    DIV C, 2
    SET PC, POP
    
;@name lib_STDIO_SPED3_PUT
;Helper function, actually modifies the vertex stack
;@params A the vertex to edit, 0 being the top
;@params X the X co-ord of the vertex
;@params Y the Y co-ord of the vertex
;@params Z the Z co-ord of the vertex
;@params C the color of the vertex, with 1 as red, 2 as green, 3 as blue, with bit 3 being intensity
;@see thePalindrome
;NOTE, DO NOT USE, STACK ISN'T REAL!
:lib_STDIO_SPED3_PUT
    SET PUSH, B
    SET B, 0
    IFE A, 0
        ADD PC, 5
    MUL A, 2
    ADD A, 2
    :lib_STDIO_RELOC46 ADD C, lib_STDIO_Projector_Stack
    ADD PC, 4
    
    ;SET A to the top vertex
    :lib_STDIO_RELOC47 SET A, [lib_STDIO_Projector_StackPos]
    SUB A, 2
    SET B, 1
   
    
    SET PUSH, Y
    SHL Y, 8
    ADD Y, X
    SET [A], Y
    IFE B, 0
        ADD PC, 3
    :lib_STDIO_RELOC48 ADD [lib_STDIO_Projector_StackPos], 1
    ADD PC, 1
    
    ADD A, 1
    
    SET Y, POP
    SHL C, 8
    ADD C, Z
    SET [A], C
    IFE B, 0
        ADD PC, 3
    :lib_STDIO_RELOC49 ADD [lib_STDIO_Projector_StackPos], 1
    ADD PC, 1
    
    ADD A, 1
    
    SET B, POP
    SET PUSH, X
    SET PUSH, Y
    :lib_STDIO_RELOC50 SET X, lib_STDIO_Projector_Stack
    :lib_STDIO_RELOC51 SET Y, [lib_STDIO_Projector_StackPos]
    :lib_STDIO_RELOC52 SUB Y, lib_STDIO_Projector_Stack
    SUB Y, 2
    DIV Y, 2
    SET A, 1
    :lib_STDIO_RELOC53 HWI [lib_STDIO_ProjectorID]
    SET Y, POP
    SET X, POP
    SET PC, POP
    
;@name lib_STDIO_SPED3_GET
;Gets vertex C, if C is 0, return the top vertex
;@params C vertex to get
;@returns X the X co-ord of the vertex
;@returns Y the Y co-ord of the vertex
;@returns Z the Z co-ord of the vertex
;@retruns C the color of the vertex, with 1 as red, 2 as green, 3 as blue, with bit 3 being intensity
;@see thePalindrome
;NOTE, DO NOT USE, STACK ISN'T REAL!
:lib_STDIO_SPED3_GET
    IFE C, 0
        ADD PC, 5
    MUL C, 2
    ADD C, 2
    :lib_STDIO_RELOC54 ADD C, lib_STDIO_Projector_Stack
    ADD PC, 3
    
    ;SET C to the top vertex
    :lib_STDIO_RELOC55 SET C, [lib_STDIO_Projector_StackPos]
    SUB C, 2
    
    SET X, [C]
    BOR X, 0x00FF
    SET Y, [C]
    SHR Y, 8
    ADD C, 1
    SET Z, [C]
    BOR Z, 0x00FF
    SET C, [C]
    SHR C, 8
    SET PC, POP
    
:lib_STDIO_KeyboardID dat 0x0000
:lib_STDIO_MonitorPos dat 0x0000
:lib_STDIO_MonitorEnd dat 0x0000
:lib_STDIO_MonitorStart dat 0x0000
:lib_STDIO_MonitorID dat 0x0000
:lib_STDIO_ProjectorID dat 0x0000
:lib_STDIO_Projector_StackPos dat lib_STDIO_Projector_Stack
:lib_STDIO_Projector_Stack
#reserve 200

;BEGIN LIBRARY HEADER
dat lib_STDIO_init
dat lib_STDIO_getChar
dat lib_STDIO_print
dat lib_STDIO_scroll
dat lib_STDIO_enter
dat lib_STDIO_SPED3_PUSH
dat lib_STDIO_SPED3_PUT
dat lib_STDIO_SPED3_GET
;END FUNCTION TABLE
dat lib_STDIO_RELOC1+1
dat lib_STDIO_RELOC2+1
dat lib_STDIO_RELOC3+1
dat lib_STDIO_RELOC4+1
dat lib_STDIO_RELOC5+1
dat lib_STDIO_RELOC6+2
dat lib_STDIO_RELOC7+2
dat lib_STDIO_RELOC8+2
dat lib_STDIO_RELOC9+2
dat lib_STDIO_RELOC10+1
dat lib_STDIO_RELOC10+2
dat lib_STDIO_RELOC11+1
dat lib_STDIO_RELOC11+2
dat lib_STDIO_RELOC12+2
dat lib_STDIO_RELOC13+1
dat lib_STDIO_RELOC14+1
dat lib_STDIO_RELOC15+1
dat lib_STDIO_RELOC16+1
dat lib_STDIO_RELOC17+1
dat lib_STDIO_RELOC18+1
dat lib_STDIO_RELOC19+1
dat lib_STDIO_RELOC20+1
dat lib_STDIO_RELOC21+2
dat lib_STDIO_RELOC22+1
dat lib_STDIO_RELOC23+1
dat lib_STDIO_RELOC24+1
dat lib_STDIO_RELOC25+2
dat lib_STDIO_RELOC26+1
dat lib_STDIO_RELOC26+2
dat lib_STDIO_RELOC27+1
dat lib_STDIO_RELOC28+1
dat lib_STDIO_RELOC29+1
dat lib_STDIO_RELOC30+1
dat lib_STDIO_RELOC31+1
dat lib_STDIO_RELOC32+1
dat lib_STDIO_RELOC33+1
dat lib_STDIO_RELOC34+1
dat lib_STDIO_RELOC35+1
dat lib_STDIO_RELOC36+2
dat lib_STDIO_RELOC37+1
dat lib_STDIO_RELOC38+1
dat lib_STDIO_RELOC39+1
dat lib_STDIO_RELOC40+2
dat lib_STDIO_RELOC41+1
dat lib_STDIO_RELOC42+1
dat lib_STDIO_RELOC43+1
dat lib_STDIO_RELOC44+1
dat lib_STDIO_RELOC45+1
dat lib_STDIO_RELOC46+1
dat lib_STDIO_RELOC47+1
dat lib_STDIO_RELOC48+1
dat lib_STDIO_RELOC49+1
dat lib_STDIO_RELOC50+1
dat lib_STDIO_RELOC51+1
dat lib_STDIO_RELOC52+1
dat lib_STDIO_RELOC53+1
dat lib_STDIO_RELOC54+1
dat lib_STDIO_RELOC55+1
dat lib_STDIO_Projector_StackPos
;END RELOCATION TABLE
dat 0x38 ; RELOCATION TABLE LENGTH
dat 1 ; LIB VERSION NUMBER
dat 0x0003 ; LIB ID
dat 2 ; LIB HEADER VERSION NUMBER
dat 0x43 ; LIB HEADER LENGTH