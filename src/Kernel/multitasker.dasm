; --------------------------------------------
; Title:   multitasker
; Author:  Alex
; Date:    10/15/2012
; Version: 
; --------------------------------------------

;@name pm_add_proc
;adds a program to the program tables
;@params A the filepath of the program
;@params Z the currentPriority
;@returns A the program ID (needed to kill it), -1 if there wasn't room
;@see thePalindrome	
:pm_add_proc
    IFE A, 0xFFFF
	    SUB PC, 1 ;OH NOES!!!!!!!!
    JSR fd_load_prog
    SET PUSH, B
	SET PUSH, C
	SET PUSH, Z
	SET C, 0
	SET B, multitasker_Progs_0
	SUB B, 0xD
	
	ADD C, 1
	ADD B, 0xD
	IFN [B], 0
	    IFL 0xF, C
	        SUB PC, 5 ; B now points to an empty program slot
	
    IFL C, 0x11
		ADD PC, 4
	SET A, -1
	SET C, POP
	SET B, POP
	SET PC, POP
	
	SET [B], A
	
	SET A, B
	SUB A, multitasker_Progs_0
	DIV A, 0xD ; Now it'll return what it's Current_process value is instead of where it is in memory :/
	ADD B, 1
	SET C, [Current_process]
	MUL C, 0xD
	ADD C, multitasker_Progs_0
	ADD C, 1
	IFG [C], Z
	    JSR pm_priorityCheck
	SET [B], Z 
	SET Z, POP
	SET C, POP
	SET B, POP
	SET PC, POP
	
;@name pm_priorityCheck
;Asks the user if a priority set is alright, EXPAND TO MATCH THE OS!
;@params Z the priority that's trying to be activated
;@returns Z the allowed priority
;@stub
:pm_priorityCheck
	SET PC, POP
	
:pm_kill_me
    SET A, [Current_process]
	JSR pm_kill
	
;@name pm_changePriority
;Changes process A's priority to B
;@param A the process ID
;@param B the new priority
:pm_changePriority
    MUL A, 0xD
	ADD A, multitasker_Progs_0
	ADD A, 1
	JSR pm_priorityCheck
	SET [A], B
	SET PC, POP
	
;@name pm_kill
;removes a program from the program list
;@params A the program ID
;@see thePalindrome
:pm_kill ; TODO add special case if trying to kill current program
    MUL A, 0xD
    ADD A, multitasker_Progs_0
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 1
	SET [A], 0
	ADD A, 2
	SET PUSH, [A]
	SUB A, 1
	SET [A], POP
	SET PC, POP
	
;@name multitasker_Interrupt
;handles the main interrupt NOTE: From top, stack is: PC (stay), PC (stay), A (replace), PC (replace)
;@see thePalindrome
:multitasker_Interrupt
    IFN [multitasker_preemption_lock], 0
	    SET PC, POP
    SET PUSH, A
	SET A, multitasker_Progs_0
	SET PUSH, B
	SET B, [Current_process]
	MUL B, 0xD
	ADD A, B
	SET B, POP ;at this point, A points to multitasker_Progs_(number of cur prog)
	ADD A, 1
	SUB [A], 1
	IFE [A], 0
	    SET PC, .continue
	SET A, POP
	SET PC, POP
	:.continue
	ADD A, 1
	SET [A], POP
	ADD A, 1
	SET [A], B
	ADD A, 1
	SET [A], C
	ADD A, 1
	SET [A], I
	ADD A, 1
	SET [A], X
	ADD A, 1
	SET [A], Y
	ADD A, 1
	SET [A], Z
	ADD A, 1
	SET [A], J
	
	SET B, SP
	ADD B, 3 ;B now points to the location in the Stack where the old program was running
	ADD A, 1
	SET [A], [B]
	
	ADD B, 1
	SET [A], B ; SP has been saved for the new program
	SUB A, 10
	
	ADD [Current_process], 1
	ADD A, 0xC
	IFL multitasker_Progs_end, A
	    SET A, multitasker_Progs_0
	IFE [A], 0 ;If there's no program loaded (+1 code of hangs-if-no-programs-available)
	    SUB PC, 7
		
	ADD A, 0xB ; THIS IS THE PART WHERE WE LOAD A NEW PROGRAM
	SET SP, [A] ;The stack will now return to the new program
	SUB A, 9
	SET [A], [A+-1] ; each program gets 14 ticks
	ADD A, 8 ; A now points to the J register of the new program
	SET J, [A]
	SUB A, 1
	SET Z, [A]
	SUB A, 1
	SET Y, [A]
	SUB A, 1
	SET X, [A]
	SUB A, 1
	SET I, [A]
	SUB A, 1
	SET C, [A]
	SUB A, 1
	SET B, [A]
	SUB A, 2
	SUB B, 2
	SET PUSH, [A]
	SET PUSH, [B]
	SUB B, 1
	SET PUSH, [B]
	SET B, 1
	SET PUSH, [B]
	ADD A, 1
	SET A, [A]
		
	:multitasker_Interrupt_End
    SET PC, POP
	
:Current_process dat 0
:multitasker_preemption_lock dat 1

;Definition of datastructure
;Current PC
;Priority in ticks
;How many ticks are left
;Registers (ABCIXYZJ)
;Where the stack is hiding
;Where the bottom of the stack is hiding
:multitasker_Progs_0 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_1 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_2 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_3 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_4 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_5 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_6 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_7 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_8 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_9 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_10 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_11 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_12 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_13 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_14 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_15 dat 0,0,0,0,0,0,0,0,0,0,0,0,0
:multitasker_Progs_end
:multitasker_Prog_max
