;INITIATE KERNEL
;Move all initiators here, remove any push/pops, they are no longer needed, remove all SET PC, POPs
;the kernel will simply go down this list to initiate itself,
;then it will deallocate the memory used for these initiators.
;The labels are only used for clarity, they should never be called.

:initiate_kernel
set [fd_boot_drive], [0xffff] ;copy boot drive number set by bootloader


:mm_init_a			;allocate all memory, including inits
set [0x0000], 0
set [0x0001], free_space_start
set a, 0x100
jsr mm_request



:im_init			;initiate the interrupt manager
hwn a
jsr mm_request
set [im_table_address], a
ias im_interrupt_handler



:fd_init			;initiate the file driver
set A, [fd_drive_cap]
mul A, 0x2
set push, A
set B, A
jsr mm_request
set [fd_drive_table], A
add peek, A
hwn J
set I, 0x0
set Z, [fd_drive_table]
:fd_init_loop
 hwq I
 ife A, 0x24c5
  ife B, 0x4fd5
   ife C, 0x000b
    ife X, 0x7e91
     ife Y, 0x1eb3
	  set pc, fd_init_add
 add I, 1
 ifn I, j
	set pc, fd_init_loop
set pc, fd_init_next
:fd_init_add
set [Z], I
add Z, 2
add I, 1
ifn Z, peek
set pc, fd_init_loop
:fd_init_next
set ex, pop
set A, [fd_drive_table]
set [fd_drive_cur], [fd_boot_drive]
;get FAT offset
set [fd_FAT_offset], [0x08] ;number of reserved sectors
set [fd_root_offset], [0x08]
add [fd_root_offset], [fd_FAT_number]
jsr fd_load_FAT
set A, 0x260
jsr mm_request
ife a, 0xffff
sub pc, 1
set [fd_file_table], A
add a, 0x260
set [fd_FC_EoT_marker], a


;:fd_init_test			;It crashes. What is it supposed to do? --Not crash, I guess. Afaik, it may be a hardware fault.
;set a, 0x1
;jsr fd_get_free_sector
;set b, [fd_FAT]


:pm_init
SET B, multitasker_Progs_0
ADD B, 0xB
SET C, 0
:pm_init_loop ;allocate stack for the processes
SET A, 20
JSR mm_request
ADD A, 19
SET [B], A
ADD B, 1
SET [B], A
ADD B, 0xC
ADD C, 1
IFL C, 15
	SET PC, pm_init_loop
SET A, 1
JSR pm_add_proc


:api_init			;put the api table into place
set a, api_table_length
set i, api_table
set j, 2
jsr ut_copy_mem


;DO NOT ALLOCATE MEMORY FROM HERE UNTIL END OF THIS FILE
:mm_init_b			;deallocate initiators
set a, free_space_start
jsr mm_free
set a, 0xff00
jsr mm_free


:cd_init			;initiate the clock, clock interrupts start after this
hwn i
sub i, 1
:.loop_a
ife i, -1
set pc, .no_clock
hwq i
ife a, 0xb402
ife b, 0x12d0
ife c, 0x0001
ife x, 0x0000
ife y, 0x0000
set pc, .found_clock
std pc, .loop_a
:.no_clock
set [cd_clock_id], -1
sub pc, 1
:.found_clock
set [cd_clock_id], i
set a, i
set b, cd_interrupt_handler
jsr im_request_handler
set b, i
add b, im_hardware_flag
set a, 2
hwi i
set a, 0
set b, tick_length
hwi i

set [multitasker_preemption_lock], 0
set pc, [multitasker_Progs_0]				;note, problems may occur if interrupt happens right before this

sub pc, 1	;Or else it randomly wanders in the first loaded function. When kernel is working, this should simply never be reached and can be removed.



;:init
;load program /init.bin from disk
;jsr multitasker_addProg
;set [multitasker_preemption_lock], 0
